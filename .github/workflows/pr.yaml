name: "pull_request"

on:
  pull_request:
    branches: [ main]
    types: [opened, synchronize, reopened]

env:
  GOLANG_VERSION: '1.20'

jobs:

  check-commit-message:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important to fetch all the commits

      - name: Check Commit Message
        run: |
          echo "Checking commit messages..."

          # Regular expression to match the commit message format
          COMMIT_REGEX='^(feat|chore|fix): .{1,86}\(\#[0-9]+\)$'

          # Fetch all the commit messages included in the PR
          commit_messages=$(git log --no-merges --pretty=format:%s origin/main..HEAD)

          # Check messages
          fail_flag=0
          echo "$commit_messages" | while IFS= read -r commit_message; do
            if ! [[ "$commit_message" =~ $COMMIT_REGEX ]]; then
              echo "Commit message \"${commit_message}\" does not match the required pattern."
              echo "Expected pattern: 'feat:', 'chore:', or 'fix:' followed by a space, a description (up to 100 characters in total including the issue number), and ends with an issue number in the format '(#number)'."
              fail_flag=1
              break # Exit the loop at the first error
            fi
          done <<< "$commit_messages"

          # If any commit message didn't match the pattern, fail the job
          if [ "$fail_flag" -ne 0 ]; then
            exit 1
          fi

          echo "All commit messages match the required format."

  build:
    needs: check-commit-message
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Make Build
        run: make build

      - name: Make Lint
        run: make lint

      # - name: SonarCloud Scan
      #   uses: sonarsource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  docker-lint:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run hadolint
        uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile

jobs:
  integration-tests:
    needs: [docker-lint]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        kube-version:
        - "1.26"
        - "1.27"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - run: |
          curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.14.0/kind-$(uname)-amd64"
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name e2e-test-cluster --image kindest/node:v${{ matrix.kube-version }}

      - run: |
          curl -LO "https://dl.k8s.io/release/v${{ matrix.kube-version }}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - run: |
          kubectl create ns keycloak
          kubectl apply -f tests/e2e/helm-success-path/01-install-keycloak-server.yaml -n keycloak
          kubectl rollout status deploy/keycloak -n keycloak --timeout=5m

      - run: |
          KEYCLOAK_IP=$(kubectl get svc keycloak -n keycloak -o jsonpath='{.spec.clusterIP}')
          TEST_KEYCLOAK_URL="http://${KEYCLOAK_IP}:8080" make test

      - if: always()
        run: kind delete cluster --name e2e-test-cluster

  integration-tests-check:
    needs: [integration-tests]
    runs-on: ubuntu-20.04
    steps:
      - run: echo The test result is ${{ needs.integration-tests.result }}

      - run: |
          if [ "${{ needs.integration-tests.result }}" != 'success' ]; then
            exit 1
          fi

  e2e-tests:
    name: End-to-end tests
    needs: [integration-tests-check]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
       # The e2e tests are run on the lowest and highest supported k8s version.
       # All Kubernetes version in between expose the same APIs, hence the operator
       # should be compatible with them.
       kube-version:
       - "1.26"
       - "1.27"

    steps:

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: "1.20"

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: "install kuttl"
      run: ./hack/install-kuttl.sh

    - name: "run tests"
      env:
        KUBE_VERSION: ${{ matrix.kube-version }}
      run: make start-kind KUBE_VERSION=$KUBE_VERSION && make e2e

  e2e-tests-check:
    runs-on: ubuntu-20.04
    if: always()
    needs: [e2e-tests]
    steps:
      - name: Print result
        run: echo ${{ needs.e2e-tests.result }}
      - name: Interpret result
        run: |
          if [[ success == ${{ needs.e2e-tests.result }} ]]
          then
            echo "All matrix jobs passed!"
          else
            echo "One or more matrix jobs failed."
            false
          fi
